#include <iostream>
#include <fcntl.h>
#include <sys/mman.h>
#include <semaphore.h>
#include <unistd.h>
#include <cstdlib>
#include <ctime>

#define SHM_NAME "/my_shared_memory"
#define SEM_NAME "/my_semaphore"
#define MAX_COUNT 1000

int main() {
    srand(time(nullptr));

    int shm_fd = shm_open(SHM_NAME, O_CREAT | O_RDWR, 0666);
    if (shm_fd == -1) {
        perror("Eroare la crearea memoriei partajate");
        return 1;
    }
    ftruncate(shm_fd, sizeof(int));
    int* shared_memory = (int*) mmap(0, sizeof(int), PROT_READ | PROT_WRITE, MAP_SHARED, shm_fd, 0);
    if (shared_memory == MAP_FAILED) {
        perror("Eroare la maparea memoriei");
        return 1;
    }

    sem_t* semaphore = sem_open(SEM_NAME, O_CREAT, 0666, 1);
    if (semaphore == SEM_FAILED) {
        perror("Eroare la crearea semaforului");
        return 1;
    }

    *shared_memory = 0;

    pid_t pid = fork();
    if (pid < 0) {
        perror("Eroare la crearea procesului");
        return 1;
    }

    while (true) {
        sem_wait(semaphore);

        if (*shared_memory >= MAX_COUNT) {
            sem_post(semaphore);
            break;
        }

        std::cout << "Proces " << (pid == 0 ? "Copil" : "Părinte") 
                  << " - Valoare curentă: " << *shared_memory << std::endl;

        if (rand() % 2 == 0) {  
            (*shared_memory)++;
            std::cout << "Proces " << (pid == 0 ? "Copil" : "Părinte") 
                      << " - Valoare actualizată: " << *shared_memory << std::endl;
        }

        sem_post(semaphore);

        usleep(100000);
    }

    if (pid > 0) {  
        sem_close(semaphore);
        sem_unlink(SEM_NAME);
        munmap(shared_memory, sizeof(int));
        shm_unlink(SHM_NAME);
    }

    return 0;
}
